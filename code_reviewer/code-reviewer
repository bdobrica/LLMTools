#!/bin/bash

# Code Reviewer Shell Script
# A convenient wrapper for the dockerized code reviewer tool
# 
# This script automatically loads OPENAI_API_KEY from ~/.env and runs
# the code reviewer Docker container on the current directory.
#
# Usage: code-reviewer [OPTIONS]
# 
# All command-line arguments are passed through to the Docker container.
# 
# Requirements:
# - Docker must be installed and running
# - ~/.env file must contain OPENAI_API_KEY=your-key-here

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DOCKER_IMAGE="quay.io/bdobrica/code-reviewer:latest"
ENV_FILE="$HOME/.env"

# Function to print colored messages
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Function to show usage
show_usage() {
    cat << EOF
Code Reviewer - AI-powered code review tool

USAGE:
    code-reviewer [OPTIONS]

DESCRIPTION:
    Analyzes git changes using static analysis and AI to provide code review feedback.
    Loads OPENAI_API_KEY from ~/.env file automatically.

OPTIONS:
    --repo PATH              Path to git repository (default: current directory)
    --base-branch BRANCH     Branch to compare against (default: main)
    --instructions PATH      Path to custom review instructions
    --ssh-key PATH          Path to SSH key for git access
    --model MODEL           OpenAI model to use (default: gpt-4-turbo)
    --help, -h              Show this help message

EXAMPLES:
    # Review changes in current directory
    code-reviewer

    # Review changes against develop branch
    code-reviewer --base-branch develop

    # Use a different OpenAI model
    code-reviewer --model gpt-4o

    # Review a specific repository
    code-reviewer --repo /path/to/repo

SETUP:
    1. Create ~/.env file with your OpenAI API key:
       echo "OPENAI_API_KEY=your-key-here" >> ~/.env

    2. Ensure Docker is installed and running

    3. Run from any git repository directory

For more information, visit: https://github.com/bdobrica/LLMTools/tree/main/code_reviewer
EOF
}

# Function to check prerequisites
check_prerequisites() {
    # Check if Docker is available and running
    if ! command -v docker >/dev/null 2>&1; then
        print_error "Docker is not installed or not in PATH"
        print_info "Please install Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi

    if ! docker info >/dev/null 2>&1; then
        print_error "Docker daemon is not running"
        print_info "Please start Docker and try again"
        exit 1
    fi

    # Check if .env file exists
    if [[ ! -f "$ENV_FILE" ]]; then
        print_error "Environment file not found: $ENV_FILE"
        print_info "Create the file with: echo 'OPENAI_API_KEY=your-key-here' >> ~/.env"
        exit 1
    fi

    # Check if OPENAI_API_KEY is in .env file
    if ! grep -q "^OPENAI_API_KEY=" "$ENV_FILE"; then
        print_error "OPENAI_API_KEY not found in $ENV_FILE"
        print_info "Add your API key: echo 'OPENAI_API_KEY=your-key-here' >> ~/.env"
        exit 1
    fi
}

# Function to load environment variables from .env file
load_env() {
    # Source the .env file to load OPENAI_API_KEY
    set -a  # Automatically export variables
    # shellcheck source=/dev/null
    source "$ENV_FILE"
    set +a

    if [[ -z "${OPENAI_API_KEY:-}" ]]; then
        print_error "OPENAI_API_KEY is empty in $ENV_FILE"
        exit 1
    fi

    print_info "Loaded environment variables from $ENV_FILE"
}

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        print_warning "Current directory is not a git repository"
        print_info "The code reviewer works best when run from within a git repository"
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Aborted by user"
            exit 0
        fi
    else
        print_success "Git repository detected"
    fi
}

# Function to pull the latest Docker image
pull_image() {
    print_info "Checking for latest Docker image..."
    if docker pull "$DOCKER_IMAGE" >/dev/null 2>&1; then
        print_success "Docker image is up to date"
    else
        print_warning "Failed to pull latest image, using cached version"
    fi
}

# Function to run the Docker container
run_container() {
    local repo_path
    repo_path=$(pwd)
    
    print_info "Running code reviewer on: $repo_path"
    print_info "Using Docker image: $DOCKER_IMAGE"
    
    # Build Docker command
    local docker_cmd=(
        docker run -it --rm
        -e OPENAI_API_KEY="$OPENAI_API_KEY"
        -v "$repo_path:/repo"
        "$DOCKER_IMAGE"
        "$@"
    )
    
    # Execute the Docker command
    "${docker_cmd[@]}"
}

# Main function
main() {
    # Handle help flag
    for arg in "$@"; do
        case $arg in
            --help|-h)
                show_usage
                exit 0
                ;;
        esac
    done

    print_info "Starting Code Reviewer..."
    
    # Run all checks
    check_prerequisites
    load_env
    check_git_repo
    
    # Pull latest image (optional, comment out if you want faster startup)
    pull_image
    
    # Run the container with all passed arguments
    run_container "$@"
}

# Execute main function with all arguments
main "$@"
